# -*- coding: utf-8 -*-
"""2_object_detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17wVWMNx-c3WbUsm6JJGH3wW_u8IuoMcI

# Yolov8 Nesne Tanıma

## Ortam Hazırlıgı
"""

from google.colab import drive
drive.mount("/content/drive")

# Commented out IPython magic to ensure Python compatibility.
# %pwd

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/yolov8/2_object_detection

# Commented out IPython magic to ensure Python compatibility.
# ultralytics indir
# %pip install ultralytics

import ultralytics
ultralytics.checks()

"""## Test / Prediction"""

# yolo kullanarak nesneleri tespit edebilmek için 2 yol vardı. Yolonun sağladığı CLI veya python ile
# CLI ile: colab ortamı oldugu için başına ünlem ekledik
# yolo ile link source edebiliyoduk
!yolo detect predict model= yolov8n.pt  source='https://ultralytics.com/images/bus.jpg'

import cv2
import imutils
from google.colab.patches import cv2_imshow

img = cv2.imread("/content/drive/MyDrive/yolov8/2_object_detection/runs/detect/predict/bus.jpg")
img = imutils.resize(img, width=340)
cv2_imshow(img)

"""## python ile verilere erişme

"""

# diktörgenlerin koordinatlarına erişme ve renklerini değiştirme ?
import cv2
from ultralytics import YOLO
from google.colab.patches import cv2_imshow

# prediction için kullanacagımız resmin adresi
img_path = "/content/drive/MyDrive/yolov8/2_object_detection/inference/126.jpg" # hali hazırda çalıştıgımız dizindeyiz zaten
model_path = "/content/drive/MyDrive/yolov8/2_object_detection/runs/detect/yolov8_brain_tumor_detection2/weights/best.pt" # modelimiz


model = YOLO(model_path) # modeli okuma
img = cv2.imread(img_path) # görüntüyü okuma

results = model(img)[0] # modeli çağırıp içine resmi yolladık, 0. indeksteki degeri çekiyoruz
# detection ile ilgili istedigimiz deger 0. indexte saklı, bunu YOLO dokumasyonundan gördük
# results içinde nameler de var


threshold = 0.5 # eger skor 0.5 den buyukse o degeri görelim oke
for result in results.boxes.data.tolist():
  x1,y1,x2,y2,score,class_id = result # güven skoru
  x1,y1,x2,y2, class_id = int(x1),int(y1),int(x2),int(y2),int(class_id)
 #  print(results)
  # guven skoru 1'e ne kadar yakınsa iyi
  if score > threshold:
    cv2.rectangle(img,(x1,y1),(x2,y2),(0,255,0),4)
    # dikdörtgenin ustune nesnenin sınıfını yazma putText ile
    font = cv2.FONT_HERSHEY_COMPLEX

    class_name = results.names[class_id]
    text = f"{class_name}: %{score: .2f}"

    score = score*100
    cv2.putText(img,text, (x1,y1-10),font,0.5,(0,255,0),2,cv2.LINE_AA)

cv2_imshow(img)


# ödev: inference içindeki tüm resimleri tara ve çıktıları alt alta bastır
# tüm resimler için farklı adres üretmen gerekiyo --> glob,os kullanarak

"""# Eğitim | Training

"""

!unzip /content/drive/MyDrive/yolov8/2_object_detection/data/brain_tumor_dataset.zip  -d ./data

!yolo detect train data=data/config.yaml model=yolov8n.pt epochs=20 imgsz=640 device=0 name=yolov8_brain_tumor_detection

# yarıda kalma/kesilmiş eğitimi devam ettirme
!yolo detect train model=/content/drive/MyDrive/yolov8/2_object_detection/runs/detect/yolov8_brain_tumor_detection2/weights/last.pt  resume=True

"""## Tümör Tespiti | Prediction

"""

!yolo detect predict model=/content/drive/MyDrive/yolov8/2_object_detection/runs/detect/yolov8_brain_tumor_detection2/weights/best.pt  source=inference save=True