# -*- coding: utf-8 -*-
"""4_image_segmentation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GiOBiiQCW5SBQ-Qqd1dX0gXiKc762gUN

# YOLOv8 Görüntü Bölütleme | Image segmentation

## Ortam Hazırlığı
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/yolov8/4_image_segmentation

# Commented out IPython magic to ensure Python compatibility.
# %pip install ultralytics
import ultralytics
ultralytics.checks()

"""## Test | Prediction"""

# segmention için de özel komut var
!yolo segment predict model=yolov8x-seg.pt source='https://ultralytics.com/images/bus.jpg'  # predict with official model
# prediction yapacak önceden egitilimiş model
# bu yapay zeka modeli COCO dataseti ile egitilmiş. 80 sınıfa dair segmentation yapabiliyor demek

# bu çıktı opnCV ile gösterme:
import cv2
import imutils
from google.colab.patches import cv2_imshow

image_path = "/content/drive/MyDrive/yolov8/4_image_segmentation/runs/segment/predict2/bus.jpg"

img = cv2.imread(image_path)
img = imutils.resize(img, height=500)
cv2_imshow(img)



# yeniden boyutlandırmak için imutils.resize

"""## Python ile verilere erişme

"""

import cv2
import numpy as np
from ultralytics import YOLO
from google.colab.patches import cv2_imshow

### data extraction block ###
def extract_data(img,model):
  h, w,ch = img.shape # temel i.p bilgisi
  results = model.predict(source=img.copy(),save=False,save_txt=False) # 3 girdi verdik,
  result = results[0] # benim için anlamlı deger 0. indexte
  seg_contour_idx = [] # boş liste, for ile dolaşıp doldurcaz


  for seg in result.masks.xy: # seg içindeki bilgilere ulaşma
    seg[:,0] = seg[:,0] *w # segmenti w ile genişlettik
    seg[:,1] = seg[:,1] *h
    segment = np.array(seg,dtype=np.int32)
    seg_contour_idx.append(segment)



  bboxes = np.array(result.boxes.xyxy.cpu(),dtype="int") # çevirici dikdörtgenlere dogrudan ulaşma yolu
  class_ids = np.array(result.boxes.cls.cpu(),dtype="int")
  scores = np.array(result.boxes.conf.cpu(),dtype="float").round(2) # noktadan sonra 2 olsun, conf guvenden geliyo
  return bboxes,class_ids,seg_contour_idx,scores

img_path = "bus.jpg"
model_path = "yolov8n-seg.pt"


img = cv2.imread(img_path)
model = YOLO(model_path)

# görüntüdeki bölütlere erişmek için
"""
SEGMENTATION BLOĞU
bboxes,  class_ids, segmentation_ids, score
"""
### data extraction  ###
bboxes,class_ids,seg_contour_idx,scores = extract_data(img,model)

for  box,class_id,segmentation_id,score in zip(bboxes,class_ids,seg_contour_idx,scores):
  # box gidip boxes içindeki degerli alıcak
  (xmin,ymin,xmax,ymax) = box
  cv2.rectangle(img,(xmin,ymin),(xmax,ymax),(0,255,0),2)
  # segmentation_ids'i segm_id ile dolaşıyoruz: piksellerin tutuldugu degerler
  # nesnenin dış sınır piksellerine polyline çizecez
  cv2.polylines(img,[segmentation_id], True,(255,0,0),2)
  # nesnelerin isimleri için:
  font = cv2.FONT_HERSHEY_COMPLEX
  cv2.putText(img, str(class_id), (xmin,ymin-10),font, 0.5,(0,255,0),2)


cv2_imshow(img)

# ödev: cv2.fillPoly() ile kontor olan yerlerin içini doldurabiliriz(maskeleme)
# ödev2: guven skorlarına eriş ve cv2.putText ile yazdır

"""## Eğitim | Training"""

!unzip data/car_part_dataset.zip -d data

# transfer learning
!yolo segment train data=/content/drive/MyDrive/yolov8/4_image_segmentation/data/config.yaml model=yolov8n-seg.pt epochs=20 imgsz=640 workers=8 batch=8 device=0 name=yolov8_car_part_segmentation

# eğitim yarıda kalırsa
!yolo segment train model = "/content/drive/MyDrive/yolov8/4_image_segmentation/runs/segment/yolov8_car_part_segmentation3/weights/last.pt" resume_True

"""## Test | Prediction"""

!yolo segment predict model=/content/drive/MyDrive/yolov8/4_image_segmentation/runs/segment/yolov8_car_part_segmentation3/weights/best.pt source='/content/drive/MyDrive/yolov8/4_image_segmentation/data/car_part_dataset/car_part_dataset/images/test' save=True

### data extraction block ###
def extract_data(img,model):
  h, w,ch = img.shape # temel i.p bilgisi
  results = model.predict(source=img.copy(),save=False,save_txt=False) # 3 girdi verdik,
  result = results[0] # benim için anlamlı deger 0. indexte
  seg_contour_idx = [] # boş liste, for ile dolaşıp doldurcaz


  for seg in result.masks.xyn: # seg içindeki bilgilere ulaşma
    seg[:,0] = seg[:,0] *w # segmenti w ile genişlettik
    seg[:,1] = seg[:,1] *h
    segment = np.array(seg,dtype=np.int32)
    seg_contour_idx.append(segment)



  bboxes = np.array(result.boxes.xyxy.cpu(),dtype="int") # çevirici dikdörtgenlere dogrudan ulaşma yolu
  class_ids = np.array(result.boxes.cls.cpu(),dtype="int")
  scores = np.array(result.boxes.conf.cpu(),dtype="float").round(2) # noktadan sonra 2 olsun, conf guvenden geliyo
  class_names = result.names

  return bboxes,class_ids,seg_contour_idx,scores,class_names

import random

img_path = "/content/drive/MyDrive/yolov8/4_image_segmentation/data/testresmi2.jpg"
model_path = "/content/drive/MyDrive/yolov8/4_image_segmentation/runs/segment/yolov8_car_part_segmentation3/weights/best.pt"


img = cv2.imread(img_path)
model = YOLO(model_path)

# görüntüdeki bölütlere erişmek için
"""
SEGMENTATION BLOĞU
bboxes,  class_ids, segmentation_ids, score
"""
### data extraction  ###
bboxes, class_ids, seg_contour_idx, scores, class_names = extract_data(img,model)

for  box,class_id,segmentation_id,score in zip(bboxes,class_ids,seg_contour_idx,scores):
  # box gidip boxes içindeki degerli alıcak
  (xmin,ymin,xmax,ymax) = box
  cv2.rectangle(img,(xmin,ymin),(xmax,ymax),(0,255,0),2)
  # segmentation_ids'i segm_id ile dolaşıyoruz: piksellerin tutuldugu degerler
  # nesnenin dış sınır piksellerine polyline çizecez
  cv2.polylines(img,[segmentation_id], True,(255,0,0),2)
  # nesnelerin isimleri için:
  font = cv2.FONT_HERSHEY_COMPLEX

  class_name = class_names[class_id]
  score = score *100
  text = f"{class_name}: %{score: .2f}"

  cv2.putText(img, str(text), (xmin,ymin-10),font, 0.5,(0,255,0),2)

cv2_imshow(img)

# ödev: cv2.fillPoly() ile kontor olan yerlerin içini doldurabiliriz(maskeleme)
# ödev2: guven skorlarına eriş ve cv2.putText ile yazdır

# ödev : her sınıf için farklı bir renk ile çizin
# 1. adım sınıf sayısını bul
# 2. adım her sınıf için farklı renk üret: random methodu ile (0,255)
# 3. adım çizmi yap

img_path = "/content/drive/MyDrive/yolov8/4_image_segmentation/data/testresmi2.jpg"
model_path = "/content/drive/MyDrive/yolov8/4_image_segmentation/runs/segment/yolov8_car_part_segmentation3/weights/best.pt"

img = cv2.imread(img_path)
model = YOLO(model_path)

# 1. adım: Sınıf sayısını bul
bboxes, class_ids, seg_contour_idx, scores, class_names = extract_data(img, model)
unique_classes = np.unique(class_ids)
num_classes = len(unique_classes)

# 2. adım: Her sınıf için farklı renk üret
colors = {class_id: (random.randint(0, 255), random.randint(0, 255), random.randint(0, 255)) for class_id in unique_classes}

# 3. adım: Çizimi yap
for box, class_id, segmentation_id, score in zip(bboxes, class_ids, seg_contour_idx, scores):
    color = colors[class_id]

    # Bounding box çiz
    (xmin, ymin, xmax, ymax) = box
    cv2.rectangle(img, (xmin, ymin), (xmax, ymax), color, 2)

    # Segmentasyon konturunu çiz ve içini doldur
    cv2.fillPoly(img, [segmentation_id], color)
    cv2.polylines(img, [segmentation_id], True, (0, 0, 0), 2)

    # Metin ekle
    font = cv2.FONT_HERSHEY_COMPLEX
    class_name = class_names[class_id]
    score_percentage = score * 100
    text = f"{class_name}: {score_percentage:.2f}%"
    cv2.putText(img, text, (xmin, ymin-10), font, 0.5, (255, 255, 255), 2)

# Görüntüyü göster
cv2_imshow(img)